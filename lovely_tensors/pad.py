# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/pad.ipynb.

# %% auto 0
__all__ = []

# %% ../nbs/pad.ipynb 4
from math import floor, ceil, log2

from matplotlib import colormaps
from matplotlib.colors import to_rgba, ListedColormap
import torch
from torch.nn.functional import embedding, pad

from .repr_rgb import RGBProxy

# %% ../nbs/pad.ipynb 6
def pad_frame(t :torch.Tensor, # Tensor with image[s], ch-last.
              frame_px=1, val=0):
    """Pad an image with zeros of thickness `frame_px`"""
    assert t.dim() >= 3
    # Note: `.pad()` counts shape from the last dim when padding.
    return pad(t, (0, 0, frame_px, frame_px, frame_px, frame_px), value=val)

# %% ../nbs/pad.ipynb 9
def pad_frame_gutters(t: torch.Tensor, # Image or images. Any shape > 3, ch-last.
                      gutter_frac=0.05, frame_px=1):
    """Add a black frame and white gutters around an image"""
    assert t.dim() >= 3
    xy_shape = t.shape[-2:]
    gutter_px = ceil(max(xy_shape)*gutter_frac//2)
    
    # XXX This does not work for RGBA images, as the alpha channel is set to 0!
    t = pad_frame(t, frame_px=frame_px, val=0) # Black frame
    return pad_frame(t, frame_px=gutter_px, val=1) # White gutters between images
